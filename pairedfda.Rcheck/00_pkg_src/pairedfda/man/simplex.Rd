% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simplex.R
\name{simplex}
\alias{simplex}
\title{Choosing tuning parameter}
\usage{
simplex(data, Kfold, ka, kb, type = "n", tol = 0.001, maxiter = 50)
}
\arguments{
\item{data}{Processed data. Use "predata" to preprocess the raw data first.}

\item{Kfold}{Number of folds}

\item{ka}{Number of pcs of the first reponse variable (Y)}

\item{kb}{Number of pcs of the second reponse variable (Z)}

\item{type}{Model type. 'n' means normal; 't' means student-t; 's' means slash. The default is normal model.}

\item{tol}{Tolerance of the simplex algorithm. The default one is 1e-3.}

\item{maxiter}{Maximum iteration time. The default is 50 times.}
}
\value{
The function returns the tuning parameter which is a vector with 4 components. The tuning parameters shows as the following order, the first mean curve \eqn{(\lambda_\mu)}, the second mean curve \eqn{(\lambda_\nu)}, the first pcs \eqn{(\lambda_f)}, the second pcs \eqn{(\lambda_g)}.
}
\description{
Use simplex method to choose tuning parameter. 
Here we use K-fold cross-validation to find the tuning parameter such that mean square error (MSE) reachs the minimum value.
}
\details{
We suppose the model is

\deqn{Y_i = B_i \theta_\mu + B_i f \alpha_i + \epsilon_i, Z_i = B_i \theta_\nu + B_i g \beta_i + \xi_i,}

where \eqn{(\alpha_i, \beta_i)} and the residuals follow normal, t or slash distribution. It is meaning of parameter `type` in this function.

The penalty term is

\deqn{\lambda_\mu \theta_\mu^T \Omega \theta_\mu + \lambda_\nu \theta_\nu^T \Omega \theta_\nu + \lambda_f \sum_{j=1}^ka \theta_{fj}^T \Omega \theta_{fj} + \lambda_g \sum_{j=1}^kb \theta_{gj}^T \Omega \theta_{gj} }
}
\examples{
rawdata = gen_data(n=100,varres=0.01, gama=2, type='t',ka=2,kb=2)
data = predata(nobs_y = rawdata$obs_times, 
               nobs_z = rawdata$obs_times, 
               time_y = rawdata$dataset[,2], 
               time_z = rawdata$dataset[,2], 
               y = rawdata$dataset[,3], 
               z = rawdata$dataset[,4], 
               knots = 10, 
               order=3)
lambda_n = simplex(data,Kfold=5,ka=2,kb=2,type='n')
lambda_t = simplex(data,Kfold=5,ka=2,kb=2,type='t')
lambda_s = simplex(data,Kfold=5,ka=2,kb=2,type='s')
}
