// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// f
double f(double x, int n, double slogu, double su);
RcppExport SEXP _pairedfda_f(SEXP xSEXP, SEXP nSEXP, SEXP sloguSEXP, SEXP suSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type slogu(sloguSEXP);
    Rcpp::traits::input_parameter< double >::type su(suSEXP);
    rcpp_result_gen = Rcpp::wrap(f(x, n, slogu, su));
    return rcpp_result_gen;
END_RCPP
}
// df
double df(double x, int n, double slogu, double su);
RcppExport SEXP _pairedfda_df(SEXP xSEXP, SEXP nSEXP, SEXP sloguSEXP, SEXP suSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type slogu(sloguSEXP);
    Rcpp::traits::input_parameter< double >::type su(suSEXP);
    rcpp_result_gen = Rcpp::wrap(df(x, n, slogu, su));
    return rcpp_result_gen;
END_RCPP
}
// newton_md
double newton_md(int n, double slogu, double su);
RcppExport SEXP _pairedfda_newton_md(SEXP nSEXP, SEXP sloguSEXP, SEXP suSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type slogu(sloguSEXP);
    Rcpp::traits::input_parameter< double >::type su(suSEXP);
    rcpp_result_gen = Rcpp::wrap(newton_md(n, slogu, su));
    return rcpp_result_gen;
END_RCPP
}
// slash_u
Rcpp::List slash_u(double gama, int ni, double delta);
RcppExport SEXP _pairedfda_slash_u(SEXP gamaSEXP, SEXP niSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gama(gamaSEXP);
    Rcpp::traits::input_parameter< int >::type ni(niSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(slash_u(gama, ni, delta));
    return rcpp_result_gen;
END_RCPP
}
// minEM
const List minEM(const List data, const arma::vec lambda, const char type, const int ka, const int kb, const double tol, int maxiter);
RcppExport SEXP _pairedfda_minEM(SEXP dataSEXP, SEXP lambdaSEXP, SEXP typeSEXP, SEXP kaSEXP, SEXP kbSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const char >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const int >::type ka(kaSEXP);
    Rcpp::traits::input_parameter< const int >::type kb(kbSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(minEM(data, lambda, type, ka, kb, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// mu_t
const arma::vec mu_t(const arma::vec t);
RcppExport SEXP _pairedfda_mu_t(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_t(t));
    return rcpp_result_gen;
END_RCPP
}
// nu_t
const arma::vec nu_t(const arma::vec t);
RcppExport SEXP _pairedfda_nu_t(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(nu_t(t));
    return rcpp_result_gen;
END_RCPP
}
// f_y1
const arma::vec f_y1(const arma::vec t);
RcppExport SEXP _pairedfda_f_y1(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(f_y1(t));
    return rcpp_result_gen;
END_RCPP
}
// f_y2
const arma::vec f_y2(const arma::vec t);
RcppExport SEXP _pairedfda_f_y2(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(f_y2(t));
    return rcpp_result_gen;
END_RCPP
}
// f_z1
const arma::vec f_z1(const arma::vec t);
RcppExport SEXP _pairedfda_f_z1(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(f_z1(t));
    return rcpp_result_gen;
END_RCPP
}
// f_z2
const arma::vec f_z2(const arma::vec t);
RcppExport SEXP _pairedfda_f_z2(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(f_z2(t));
    return rcpp_result_gen;
END_RCPP
}
// gen_data
List gen_data(const int& n, const double& varres, const double& gama, const char& type, const int ka, const int kb);
RcppExport SEXP _pairedfda_gen_data(SEXP nSEXP, SEXP varresSEXP, SEXP gamaSEXP, SEXP typeSEXP, SEXP kaSEXP, SEXP kbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type varres(varresSEXP);
    Rcpp::traits::input_parameter< const double& >::type gama(gamaSEXP);
    Rcpp::traits::input_parameter< const char& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const int >::type ka(kaSEXP);
    Rcpp::traits::input_parameter< const int >::type kb(kbSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_data(n, varres, gama, type, ka, kb));
    return rcpp_result_gen;
END_RCPP
}
// loglike
double loglike(const List data, const List para, const char type);
RcppExport SEXP _pairedfda_loglike(SEXP dataSEXP, SEXP paraSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const char >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike(data, para, type));
    return rcpp_result_gen;
END_RCPP
}
// orth_algo
const List orth_algo(arma::mat Th, arma::mat V);
RcppExport SEXP _pairedfda_orth_algo(SEXP ThSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Th(ThSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(orth_algo(Th, V));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pairedfda_f", (DL_FUNC) &_pairedfda_f, 4},
    {"_pairedfda_df", (DL_FUNC) &_pairedfda_df, 4},
    {"_pairedfda_newton_md", (DL_FUNC) &_pairedfda_newton_md, 3},
    {"_pairedfda_slash_u", (DL_FUNC) &_pairedfda_slash_u, 3},
    {"_pairedfda_minEM", (DL_FUNC) &_pairedfda_minEM, 7},
    {"_pairedfda_mu_t", (DL_FUNC) &_pairedfda_mu_t, 1},
    {"_pairedfda_nu_t", (DL_FUNC) &_pairedfda_nu_t, 1},
    {"_pairedfda_f_y1", (DL_FUNC) &_pairedfda_f_y1, 1},
    {"_pairedfda_f_y2", (DL_FUNC) &_pairedfda_f_y2, 1},
    {"_pairedfda_f_z1", (DL_FUNC) &_pairedfda_f_z1, 1},
    {"_pairedfda_f_z2", (DL_FUNC) &_pairedfda_f_z2, 1},
    {"_pairedfda_gen_data", (DL_FUNC) &_pairedfda_gen_data, 6},
    {"_pairedfda_loglike", (DL_FUNC) &_pairedfda_loglike, 3},
    {"_pairedfda_orth_algo", (DL_FUNC) &_pairedfda_orth_algo, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_pairedfda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
