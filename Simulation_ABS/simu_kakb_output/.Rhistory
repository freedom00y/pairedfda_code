filename = "n_0.04_550_0.01"
A=read.table(paste0(filename,".txt"),skip=4,nrow=550)
setwd("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/simu_output_outlier")
filename = "n_0.04_550_0.01"
A=read.table(paste0(filename,".txt"),skip=4,nrow=550)
colnames(A) = c("",
"MeanMu_t","MeanNu_t","yPC1_t","yPC2_t","zPC1_t","zPC2_t","Ind1_t","Ind2_t",
"MeanMu_s","MeanNu_s","yPC1_s","yPC2_s","zPC1_s","zPC2_s","Ind1_s","Ind2_s",
"MeanMu_n","MeanNu_n","yPC1_n","yPC2_n","zPC1_n","zPC2_n","Ind1_n","Ind2_n")
mean1 = A[,1:3*8-6]
mean2 = A[,1:3*8-5]
ypc1  = A[,1:3*8-4]
ypc2  = A[,1:3*8-3]
zpc1  = A[,1:3*8-2]
zpc2  = A[,1:3*8-1]
ind1  = A[,1:3*8]
ind2  = A[,1:3*8+1]
par(mfrow = c(2,4))
boxplot(mean1)
boxplot(ypc1)
boxplot(ypc1)
boxplot(ind1)
boxplot(mean2)
boxplot(zpc1)
boxplot(zpc2)
boxplot(ind2)
files=c("n_0.04_550_0.01","n_0.04_550_0.03","n_0.04_550_0.05",
"n_0.25_550_0.01","n_0.25_550_0.03","n_0.25_550_0.05")
SumTable <- function(filename)
{
res = read.table(paste0(filename,".txt"),skip=555,nrow=3)
colnames(res) = c("Fit_Method","Mean1","Mean2",
"YPC1","YPC2","ZPC1","ZPC2","Ind1","Ind2")
Gen_Method = filename
res = cbind(Gen_Method,res)
print(apply(res[,-c(1,2)],2,which.max))
return(res)
}
AllRes = data.frame()
for(k in 1:6)
{
filename = files[k]
OneRes = SumTable(filename)
AllRes = rbind(AllRes,OneRes)
}
卡
k=4
filename = files[k]
OneRes = SumTable(filename)
AllRes = rbind(AllRes,OneRes)
files=c("n_0.04_550_0.01","n_0.04_550_0.03","n_0.04_550_0.05",
"n_0.25_550_0.01","n_0.25_550_0.03","n_0.25_550_0.05")
SumTable <- function(filename)
{
res = read.table(paste0(filename,".txt"),skip=555,nrow=3)
colnames(res) = c("Fit_Method","Mean1","Mean2",
"YPC1","YPC2","ZPC1","ZPC2","Ind1","Ind2")
Gen_Method = filename
res = cbind(Gen_Method,res)
print(apply(res[,-c(1,2)],2,which.max))
return(res)
}
AllRes = data.frame()
for(k in 1:6)
{
filename = files[k]
OneRes = SumTable(filename)
AllRes = rbind(AllRes,OneRes)
}
k
filename = files[k]
OneRes = SumTable(filename)
files=c("n_0.04_550_0.01","n_0.04_550_0.03","n_0.04_550_0.05",
"n_0.25_550_0.01","n_0.25_550_0.03","n_0.25_550_0.05")
SumTable <- function(filename)
{
res = read.table(paste0(filename,".txt"),skip=555,nrow=3)
colnames(res) = c("Fit_Method","Mean1","Mean2",
"YPC1","YPC2","ZPC1","ZPC2","Ind1","Ind2")
Gen_Method = filename
res = cbind(Gen_Method,res)
print(apply(res[,-c(1,2)],2,which.max))
return(res)
}
AllRes = data.frame()
for(k in 1:6)
{
filename = files[k]
OneRes = SumTable(filename)
AllRes = rbind(AllRes,OneRes)
}
View(AllRes)
1.2*3
runif(100)
a=runif(100)
sum(a<=0.01)
round(-0.5)
Rcpp::sourceCpp("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/dataGen_CurveOutlier.cpp")
Rcpp::sourceCpp("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/dataGen_CurveOutlier.cpp")
Rcpp::sourceCpp("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/dataGen_CurveOutlier.cpp")
data = gen_data_curveoutlier(n=100,varres=0.04,percent=0.01,ka=2,kb=2)
setwd("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS")
seed=8
type="t"
freedom=1
varres=0.04
ka = 2
kb = 2
n  = 100
Kfold=5 ## The fold number for choosing tuning parameters
#################### Source packages ######################################
library(pairedfda)
#source('IMSE_each.R')
source('IMSE_each_abs.R')          ## Compute the integral between estimation curve and the true one
source('plot_curve.R')
Rcpp::sourceCpp('dataGen_CurveOutlier.cpp')
#################### Data Analysis #########################################
## Generate Data
set.seed(seed)
data = gen_data_curveoutlier(n=100,varres=0.04,percent=0.01,ka=2,kb=2)
colnames(data$dataset)  = c("subject","obs_time","y_t","z_t")
tmp.data = predata(nobs_y = data$obs_times,
nobs_z = data$obs_times,
time_y = data$dataset[,2],
time_z = data$dataset[,2],
y      = data$dataset[,3],
z      = data$dataset[,4],
knots  = 10,
order  = 3)
tmp.data$score = data$score
tmp.data$latent = data$latent
data=tmp.data
## Choose tuning parameters
print("start")
tlambda = simplex(data,Kfold,ka,kb,'t',tol = 1e-4,maxiter = 100)
print("finish t")
print(tlambda)
slambda = simplex(data,Kfold,ka,kb,'s',tol = 1e-4,maxiter = 100)
print("finish s")
print(slambda)
nlambda = simplex(data,Kfold,ka,kb,'n',tol = 1e-4,maxiter = 100)
print("finish n")
print(nlambda)
pt
pt      = minEM(data, tlambda, type='t',ka,kb, tol = 1e-4)
ps      = minEM(data, slambda, type='s',ka,kb, tol = 1e-4)
pn      = minEM(data, nlambda, type='n',ka,kb, tol = 1e-4)
filename="test"
plot_curve(filename,pt,ps,pn)
int_t   = IMSE_each(data,pt,n)
int_s   = IMSE_each(data,ps,n)
int_n   = IMSE_each(data,pn,n)
res     = c(int_t,int_s,int_n)
res
matrix(res,nrow=3)
matrix(res,nrow=3,byrow = T)
source("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/onesimu_curveoutlier.R")
simu(8,"n",4,0.04)
a = c(0.03874196 0.03735184 0.06983571 0.07084540 0.05948050
a = c(0.03874196, 0.03735184, 0.06983571, 0.07084540, 0.05948050,
0.05918813, 0.21455169, 0.06452783, 0.03867332, 0.03693940,
0.06973727, 0.07084842, 0.05952002, 0.05930778, 0.21479431,
0.06458880, 0.03868441, 0.03695257, 0.06957760, 0.07068265,
0.05970459, 0.05951400, 0.21479414, 0.06459537)
matrix(a,nrow=3)
a=simu(8,"n",4,0.04,filename="test")
matrix(a,nrow=3,byrow=TRUE)
source("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/onesimu_curveoutlier.R")
a=simu(8,"n",4,0.04,filename="test")
matrix(a,nrow=3,byrow=T)
a=simu(18,"n",4,0.04,filename="test")
matrix(a,nrow=3,byrow=T)
Rcpp::sourceCpp("dataGen_CurveOutlier.cpp")
source("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/onesimu_curveoutlier.R")
a=simu(18,"n",4,0.04,filename="test")
source("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/onesimu_curveoutlier.R")
a=simu(108,"n",4,0.04,filename="test")
matrix(a,nrow=3,byrow=T)
Rcpp::sourceCpp("dataGen_CurveOutlier.cpp")
source("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/onesimu_curveoutlier.R")
a=simu(108,"n",4,0.04,filename="test")
matrix(a,nrow=3,byrow=T)
Rcpp::sourceCpp("dataGen_CurveOutlier.cpp")
source("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/onesimu_curveoutlier.R")
Rcpp::sourceCpp("dataGen_CurveOutlier.cpp")
source("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/onesimu_curveoutlier.R")
a=simu(108,"n",4,0.04,filename="test")
Rcpp::sourceCpp("dataGen_CurveOutlier.cpp")
source("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/onesimu_curveoutlier.R")
a=simu(108,"n",4,0.04,filename="test")
a
matrix(a,nrow=3,byrow=T)
seed=8
type="n"
freedom=1
varres=0.01
filename="test"
ka = 2
kb = 2
n  = 100
Kfold=5 ## The fold number for choosing tuning parameters
#################### Source packages ######################################
library(pairedfda)
#source('IMSE_each.R')
source('IMSE_each_abs.R')          ## Compute the integral between estimation curve and the true one
source('plot_curve.R')
Rcpp::sourceCpp('dataGen_CurveOutlier.cpp')
#################### Data Analysis #########################################
## Generate Data
set.seed(seed)
data = gen_data_curveoutlier(n=100,varres=0.04,percent=0.01,ka=2,kb=2)
colnames(data$dataset)  = c("subject","obs_time","y_t","z_t")
tmp.data = predata(nobs_y = data$obs_times,
nobs_z = data$obs_times,
time_y = data$dataset[,2],
time_z = data$dataset[,2],
y      = data$dataset[,3],
z      = data$dataset[,4],
knots  = 10,
order  = 3)
tmp.data$score = data$score
tmp.data$latent = data$latent
data=tmp.data
## Choose tuning parameters
print("start")
tlambda = simplex(data,Kfold,ka,kb,'t',tol = 1e-4,maxiter = 100)
print("finish t")
print(tlambda)
slambda = simplex(data,Kfold,ka,kb,'s',tol = 1e-4,maxiter = 100)
print("finish s")
print(slambda)
nlambda = simplex(data,Kfold,ka,kb,'n',tol = 1e-4,maxiter = 100)
print("finish n")
print(nlambda)
if(is.na(filename)==FALSE)
plot_curve(filename,pt,ps,pn)
plot_curve(filename,pt,ps,pn)
filename
plot_curve(filename,pt,ps,pn)
pt
pt      = minEM(data, tlambda, type='t',ka,kb, tol = 1e-4)
ps      = minEM(data, slambda, type='s',ka,kb, tol = 1e-4)
pn      = minEM(data, nlambda, type='n',ka,kb, tol = 1e-4)
if(is.na(filename)==FALSE)
plot_curve(filename,pt,ps,pn)
## Compute IMSE
int_t   = IMSE_each(data,pt,n)
int_s   = IMSE_each(data,ps,n)
int_n   = IMSE_each(data,pn,n)
res     = c(int_t,int_s,int_n)
matrix(res,3,byrow=T)
setwd("~/Documents/Research/pairedfda/pairedfda_code/papercode_organized/Simulation_ABS/simu_kakb_output")
text = c("(1,1)","(1,2)","(1,3)","(2,1)","(2,2)","(2,3)","(3,1)","(3,2)","(3,3)")
n=500
files=c("t_0.04_530","t_0.25_530","s_0.04_530","s_0.25_530")
correct_rate=matrix(nrow=8,ncol=3)
k=2
nsamp=530
filename = files[k]
A=read.table(paste0(filename,".txt"),skip=4,nrow=nsamp)
A=as.matrix(A)
A=A[!is.na(A[,2]),]
neff = dim(A)[1]
pdf(paste0(filename,"_small_gamma.pdf"))
par(mfrow=c(5,3))
par(mar=c(1,1,1,1))
for(i in 1:n)
{
oneseed = A[i,1]
oneres = as.vector(A[i,2:10])
sortres = sort(oneres, decreasing = TRUE, index.return=TRUE)
plot(1:length(sortres$x),sortres$x,'l',xlim=c(0,10))
text(1:length(sortres$x)+0.2,sortres$x+0.2,text[sortres$ix])
ind = which(sortres$ix==5)
text(ind+0.2,sortres$x[ind]+0.2,"(2,2)",col="red")
}
dev.off()
right_ratio1=c()
for(q in c(0,0.01,0.05))
{
rightnum=0
for(i in 1:n)
{
oneres = as.vector(A[i,2:10])
threshold = (1+q)*min(oneres,na.rm=TRUE)
if( (!is.na(oneres[5]) & oneres[5]<= threshold) & (oneres[1]>threshold | is.na(oneres[1])) & (oneres[2]> threshold | is.na(oneres[2])) & (oneres[4]> threshold| is.na(oneres[4])))
rightnum=rightnum+1
}
right_ratio1=c(right_ratio1,rightnum/n)
}
correct_rate[2*k-1,]=right_ratio1
###############################################################
A=read.table(paste0(filename,".txt"),skip=6+nsamp,nrow=nsamp)
A=as.matrix(A)
A=A[!is.na(A[,2]),]
neff = dim(A)[1]
pdf(paste0(filename,"_large_gamma.pdf"))
par(mfrow=c(5,3))
par(mar=c(1,1,1,1))
for(i in 1:n)
{
oneseed = A[i,1]
oneres = as.vector(A[i,2:10])
sortres = sort(oneres, decreasing = TRUE, index.return=TRUE)
plot(1:length(sortres$x),sortres$x,'l',xlim=c(0,10))
text(1:length(sortres$x),sortres$x,text[sortres$ix])
ind = which(sortres$ix==5)
text(ind,sortres$x[ind],"(2,2)",col="red")
}
dev.off()
right_ratio2=c()
for(q in c(0,0.01,0.05))
{
rightnum=0
for(i in 1:n)
{
oneres = as.vector(A[i,2:10])
threshold = (1+q)*min(oneres,na.rm=TRUE)
if( oneres[5]<= threshold & (oneres[1]>threshold | is.na(oneres[1])) & (oneres[2]> threshold | is.na(oneres[2])) & (oneres[4]> threshold| is.na(oneres[4])))
rightnum=rightnum+1
}
right_ratio2=c(right_ratio2,rightnum/n)
}
correct_rate[2*k,]=right_ratio2
correct_rate
text = c("(1,1)","(1,2)","(1,3)","(2,1)","(2,2)","(2,3)","(3,1)","(3,2)","(3,3)")
n=500
files=c("t_0.04_530","t_0.25_530","s_0.04_530","s_0.25_530")
correct_rate=matrix(nrow=8,ncol=3)
k=4
nsamp=530
filename = files[k]
A=read.table(paste0(filename,".txt"),skip=4,nrow=nsamp)
A=as.matrix(A)
A=A[!is.na(A[,2]),]
neff = dim(A)[1]
pdf(paste0(filename,"_small_gamma.pdf"))
par(mfrow=c(5,3))
par(mar=c(1,1,1,1))
for(i in 1:n)
{
oneseed = A[i,1]
oneres = as.vector(A[i,2:10])
sortres = sort(oneres, decreasing = TRUE, index.return=TRUE)
plot(1:length(sortres$x),sortres$x,'l',xlim=c(0,10))
text(1:length(sortres$x)+0.2,sortres$x+0.2,text[sortres$ix])
ind = which(sortres$ix==5)
text(ind+0.2,sortres$x[ind]+0.2,"(2,2)",col="red")
}
dev.off()
right_ratio1=c()
for(q in c(0,0.01,0.05))
{
rightnum=0
for(i in 1:n)
{
oneres = as.vector(A[i,2:10])
threshold = (1+q)*min(oneres,na.rm=TRUE)
if( (!is.na(oneres[5]) & oneres[5]<= threshold) & (oneres[1]>threshold | is.na(oneres[1])) & (oneres[2]> threshold | is.na(oneres[2])) & (oneres[4]> threshold| is.na(oneres[4])))
rightnum=rightnum+1
}
right_ratio1=c(right_ratio1,rightnum/n)
}
correct_rate[2*k-1,]=right_ratio1
###############################################################
A=read.table(paste0(filename,".txt"),skip=6+nsamp,nrow=nsamp)
A=as.matrix(A)
A=A[!is.na(A[,2]),]
neff = dim(A)[1]
pdf(paste0(filename,"_large_gamma.pdf"))
par(mfrow=c(5,3))
par(mar=c(1,1,1,1))
for(i in 1:n)
{
oneseed = A[i,1]
oneres = as.vector(A[i,2:10])
sortres = sort(oneres, decreasing = TRUE, index.return=TRUE)
plot(1:length(sortres$x),sortres$x,'l',xlim=c(0,10))
text(1:length(sortres$x),sortres$x,text[sortres$ix])
ind = which(sortres$ix==5)
text(ind,sortres$x[ind],"(2,2)",col="red")
}
dev.off()
right_ratio2=c()
for(q in c(0,0.01,0.05))
{
rightnum=0
for(i in 1:n)
{
oneres = as.vector(A[i,2:10])
threshold = (1+q)*min(oneres,na.rm=TRUE)
if( oneres[5]<= threshold & (oneres[1]>threshold | is.na(oneres[1])) & (oneres[2]> threshold | is.na(oneres[2])) & (oneres[4]> threshold| is.na(oneres[4])))
rightnum=rightnum+1
}
right_ratio2=c(right_ratio2,rightnum/n)
}
correct_rate[2*k,]=right_ratio2
correct_rate
correct_rate
####################################################
for(k in 1:4)
{
nsamp=530
filename = files[k]
A=read.table(paste0(filename,".txt"),skip=4,nrow=nsamp)
A=as.matrix(A)
A=A[!is.na(A[,2]),]
neff = dim(A)[1]
pdf(paste0(filename,"_small_gamma.pdf"))
par(mfrow=c(5,3))
par(mar=c(1,1,1,1))
for(i in 1:n)
{
oneseed = A[i,1]
oneres = as.vector(A[i,2:10])
sortres = sort(oneres, decreasing = TRUE, index.return=TRUE)
plot(1:length(sortres$x),sortres$x,'l',xlim=c(0,10))
text(1:length(sortres$x)+0.2,sortres$x+0.2,text[sortres$ix])
ind = which(sortres$ix==5)
text(ind+0.2,sortres$x[ind]+0.2,"(2,2)",col="red")
}
dev.off()
right_ratio1=c()
for(q in c(0,0.01,0.05))
{
rightnum=0
for(i in 1:n)
{
oneres = as.vector(A[i,2:10])
threshold = (1+q)*min(oneres,na.rm=TRUE)
if( (!is.na(oneres[5]) & oneres[5]<= threshold) & (oneres[1]>threshold | is.na(oneres[1])) & (oneres[2]> threshold | is.na(oneres[2])) & (oneres[4]> threshold| is.na(oneres[4])))
rightnum=rightnum+1
}
right_ratio1=c(right_ratio1,rightnum/n)
}
correct_rate[2*k-1,]=right_ratio1
###############################################################
A=read.table(paste0(filename,".txt"),skip=6+nsamp,nrow=nsamp)
A=as.matrix(A)
A=A[!is.na(A[,2]),]
neff = dim(A)[1]
pdf(paste0(filename,"_large_gamma.pdf"))
par(mfrow=c(5,3))
par(mar=c(1,1,1,1))
for(i in 1:n)
{
oneseed = A[i,1]
oneres = as.vector(A[i,2:10])
sortres = sort(oneres, decreasing = TRUE, index.return=TRUE)
plot(1:length(sortres$x),sortres$x,'l',xlim=c(0,10))
text(1:length(sortres$x),sortres$x,text[sortres$ix])
ind = which(sortres$ix==5)
text(ind,sortres$x[ind],"(2,2)",col="red")
}
dev.off()
right_ratio2=c()
for(q in c(0,0.01,0.05))
{
rightnum=0
for(i in 1:n)
{
oneres = as.vector(A[i,2:10])
threshold = (1+q)*min(oneres,na.rm=TRUE)
if( oneres[5]<= threshold & (oneres[1]>threshold | is.na(oneres[1])) & (oneres[2]> threshold | is.na(oneres[2])) & (oneres[4]> threshold| is.na(oneres[4])))
rightnum=rightnum+1
}
right_ratio2=c(right_ratio2,rightnum/n)
}
correct_rate[2*k,]=right_ratio2
}
correct_rate
