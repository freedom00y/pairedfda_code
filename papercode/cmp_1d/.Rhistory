# Import functions
source('~/Documents/Research/Varying_Coefficient_Model/code/Simulation5/functions_Hilbert.R')
source('~/Documents/Research/Varying_Coefficient_Model/code/Simulation5/functions.R')
source('~/Documents/Research/Varying_Coefficient_Model/code/Age_composition_1year/Kfold_CV_real_data.R')
# Import data
load("~/Documents/Research/Varying_Coefficient_Model/dataset/age_pyramid_economy2015.RData")
Xraw = as.matrix(New_Pyramid2015[,24:26])
X = apply(Xraw,2,function(d) (d-mean(d))/sd(d))
#X=Xraw
Z = log(as.vector(New_Pyramid2015[,27]), base=10)
Ymat = as.matrix(New_Pyramid2015[,3:23])/5
AgeSup = seq(2,102,5)
corr(X,Z)
cor(X,Z)
cor(X)
cor(cbind(X,Z))
Rcpp::sourceCpp('Documents/Research/pairedfda/code/pairedfda/src/dataGen.cpp')
Rcpp::sourceCpp('Documents/Research/pairedfda/code/pairedfda/src/EMouter.cpp')
rawdata = gen_data(n=100,
varres=0.01,
gama=2,
type='t',
ka=2,
kb=2)
data = predata(nobs_y = rawdata$obs_times,
nobs_z = rawdata$obs_times,
time_y = rawdata$dataset[,2],
time_z = rawdata$dataset[,2],
y = rawdata$dataset[,3],
z = rawdata$dataset[,4],
knots = 10,
order=3)
## without penalty
lambda = c(0,0,0,0)
pt_nopen = minEM(data,
lambda,
type='t',
ka=2,
kb=2,
tol = 1e-4,
maxiter = 100)
setwd("~/Documents/Research/pairedfda/code/papercode/Cmp_1d")
Rcpp::sourceCpp('dataGen.cpp')
library(R.matlab)
# True value
x  = seq(0,1,0.01)
mu = mu_t(x)
nu = nu_t(x)
f1 = f_y1(x)
f2 = f_y2(x)
g1 = f_z1(x)
g2 = f_z2(x)
# Estimated value
i=1
res = readMat(paste0("data_t2/res",i,".mat"))
res$f
res_mu_m = mu - res$mu
res_nu_m = nu - res$nu
res_f1_p = f1 + res$f[,1]
res_f1_m = f1 - res$f[,1]
res_mu_m = mu - res$mu
res_nu_m = nu - res$nu
res_f1_p = f1 + res$f[,1]
res_f1_m = f1 - res$f[,1]
res_f2_p = f2 + res$f[,2]
res_f2_m = f2 - res$f[,2]
res_g1_p = g1 + res$g[,1]
res_g1_m = g1 - res$g[,1]
res_g2_p = g2 + res$g[,2]
res_g2_m = g2 - res$g[,2]
f1%*%t(data$score[,1])
library(R.matlab)
# True value
x  = seq(0,1,0.01)
mu = mu_t(x)
nu = nu_t(x)
f1 = f_y1(x)
f2 = f_y2(x)
g1 = f_z1(x)
g2 = f_z2(x)
# Estimated value
i=1
res = readMat(paste0("data_t2/res",i,".mat"))
data = readMat(paste0("data_t2/data",i,".mat"))
res_mu_m = mu - res$mu
res_nu_m = nu - res$nu
res_f1_p = f1 + res$f[,1]
res_f1_m = f1 - res$f[,1]
res_f2_p = f2 + res$f[,2]
res_f2_m = f2 - res$f[,2]
res_g1_p = g1 + res$g[,1]
res_g1_m = g1 - res$g[,1]
res_g2_p = g2 + res$g[,2]
res_g2_m = g2 - res$g[,2]
score = data$score
f1%*%t(score[,1]) - res$yhat
res_af1_m
res_af1_m= f1%*%t(score[,1]) - res$yhat
dim(res_af1_m)
mu + f1%*%t(score[,1])
mu
dim(f1%*%t(score[,1]) )
mu%*%rep(1,100) + f1%*%t(score[,1])
res_y_m= mu%*%rep(1,100) + f1%*%t(score[,1])  + f2%*%t(score[,2]) - res$yhat
dim(res_y_m)
res_y_m= mu%*%rep(1,100) + f1%*%t(score[,1])  + f2%*%t(score[,2]) - res$yhat
res_z_m= mu%*%rep(1,100) + g1%*%t(score[,3])  + g2%*%t(score[,4]) - res$zhat
int[1] = mean(res_mu_m^2)
int[2] = mean(res_nu_m^2)
int[3] = min( mean(res_f1_p^2), mean(res_f1_m^2) )
int[4] = min( mean(res_f2_p^2), mean(res_f2_m^2) )
int[5] = min( mean(res_g1_p^2), mean(res_g1_m^2) )
int[6] = min( mean(res_g2_p^2), mean(res_g2_m^2) )
int[7] = mean((res_y_m)^2)
int[8] = mean((res_z_m)^2)
int = rep(0,8)
int[1] = mean(res_mu_m^2)
int[2] = mean(res_nu_m^2)
int[3] = min( mean(res_f1_p^2), mean(res_f1_m^2) )
int[4] = min( mean(res_f2_p^2), mean(res_f2_m^2) )
int[5] = min( mean(res_g1_p^2), mean(res_g1_m^2) )
int[6] = min( mean(res_g2_p^2), mean(res_g2_m^2) )
int[7] = mean((res_y_m)^2)
int[8] = mean((res_z_m)^2)
# Estimated value
result = matrix(nrow=100,ncol=8)
for(i in 1:100)
{
res = readMat(paste0("data_t2/res",i,".mat"))
data = readMat(paste0("data_t2/data",i,".mat"))
score = data$score
res_mu_m = mu - res$mu
res_nu_m = nu - res$nu
res_f1_p = f1 + res$f[,1]
res_f1_m = f1 - res$f[,1]
res_f2_p = f2 + res$f[,2]
res_f2_m = f2 - res$f[,2]
res_g1_p = g1 + res$g[,1]
res_g1_m = g1 - res$g[,1]
res_g2_p = g2 + res$g[,2]
res_g2_m = g2 - res$g[,2]
res_y_m= mu%*%rep(1,100) + f1%*%t(score[,1])  + f2%*%t(score[,2]) - res$yhat
res_z_m= mu%*%rep(1,100) + g1%*%t(score[,3])  + g2%*%t(score[,4]) - res$zhat
int = rep(0,8)
int[1] = mean(res_mu_m^2)
int[2] = mean(res_nu_m^2)
int[3] = min( mean(res_f1_p^2), mean(res_f1_m^2) )
int[4] = min( mean(res_f2_p^2), mean(res_f2_m^2) )
int[5] = min( mean(res_g1_p^2), mean(res_g1_m^2) )
int[6] = min( mean(res_g2_p^2), mean(res_g2_m^2) )
int[7] = mean((res_y_m)^2)
int[8] = mean((res_z_m)^2)
result[i,] = int
}
result
apply(result,2,mean)
source('~/Documents/Research/pairedfda/code/papercode/Cmp_1d/result_t2.R')
Rcpp::sourceCpp('dataGen.cpp')
source('~/Documents/Research/pairedfda/code/papercode/Cmp_1d/result_t2.R')
apply(result,2,mean)
seppca = apply(result,2,mean)
getwd()
filename = "/Users/huiya/Documents/Research/pairedfda/code/papercode/Simulation/simu_output/t_0.04_550.txt"
A=read.table(filename,skip=4,nrow=550)
A=as.matrix(A)
View(A)
View(A)
order(A[,1])
A[order(A[,1]),]
B = A[order(A[,1]),]
View(B)
jointpca = apply(B[1:100,],2,mean)
seppca = apply(result,2,mean)
jointpca
jointpca = apply(B[1:100,1:8],2,mean)
jointpca
seppca
jointpca = 1000*apply(B[1:100,1:8],2,mean)
jointpca
seppca
seppca = 1000*apply(result,2,mean)
jointpca = apply(B[1:100,1:8],2,mean)
seppca
jointpca
View(B)
View(B)
View(B[1:100,1:8])
library(R.matlab)
Rcpp::sourceCpp('dataGen.cpp')
# True value
x  = seq(0,1,0.01)
mu = mu_t(x)
nu = nu_t(x)
f1 = f_y1(x)
f2 = f_y2(x)
g1 = f_z1(x)
g2 = f_z2(x)
# Estimated value
result = matrix(nrow=100,ncol=8)
for(i in 1:100)
{
res = readMat(paste0("data_s1/res",i,".mat"))
data = readMat(paste0("data_s1/data",i,".mat"))
score = data$score
res_mu_m = mu - res$mu
res_nu_m = nu - res$nu
res_f1_p = f1 + res$f[,1]
res_f1_m = f1 - res$f[,1]
res_f2_p = f2 + res$f[,2]
res_f2_m = f2 - res$f[,2]
res_g1_p = g1 + res$g[,1]
res_g1_m = g1 - res$g[,1]
res_g2_p = g2 + res$g[,2]
res_g2_m = g2 - res$g[,2]
res_y_m= mu%*%rep(1,100) + f1%*%t(score[,1])  + f2%*%t(score[,2]) - res$yhat
res_z_m= mu%*%rep(1,100) + g1%*%t(score[,3])  + g2%*%t(score[,4]) - res$zhat
int = rep(0,8)
int[1] = mean(res_mu_m^2)
int[2] = mean(res_nu_m^2)
int[3] = min( mean(res_f1_p^2), mean(res_f1_m^2) )
int[4] = min( mean(res_f2_p^2), mean(res_f2_m^2) )
int[5] = min( mean(res_g1_p^2), mean(res_g1_m^2) )
int[6] = min( mean(res_g2_p^2), mean(res_g2_m^2) )
int[7] = mean((res_y_m)^2)
int[8] = mean((res_z_m)^2)
result[i,] = int
}
seppca = 1000*apply(result,2,mean)
filename = "/Users/huiya/Documents/Research/pairedfda/code/papercode/Simulation/simu_output/s_0.04_550.txt"
A=read.table(filename,skip=4,nrow=550)
A=as.matrix(A)
B = A[order(A[,1]),]
jointpca = apply(B[1:100,1:8],2,mean)
jointpca
seppca
res$mu
sqrt(15)/(1+sqrt(5))
plot(mu)
plot(nu)
7-4.5
